begin
	integer x, y, z
	x <= 2
	y <= 4
	boolean a, b, c
	a <= true
	b <= false

	% 1D beginning and end array assignment test
	put "[...1D beginning and end array assignment TESTING...]"
	put skip
	integer A0[10]
	A0[1] <= 1
	A0[10] <= 100

	if (A0[1] = 1) then
		put "1D array assignment (beginning) PASSED."
	else
		put "1D array assignment (beginning) FAILED."
	end
	put skip
	if (A0[10] = 100) then
		put "1D array assignment (end) PASSED."
	else
		put "1D array assignment (end) FAILED."
	end
	put skip

	% 1D complete array assignment test
	put "[...1D complete array assignment TESTING...]"
	put skip
	integer A1[3]
	A1[1] <= 1
	A1[2] <= 2
	A1[3] <= 3

	if (A1[1] = 1) then
		put "1D array assignment (arr of len 3, index 1) PASSED."
	else
		put "1D array assignment (arr of len 3, index 1) FAILED."
	end
	put skip
	if (A1[2] = 2) then
		put "1D array assignment (arr of len 3, index 2) PASSED."
	else
		put "1D array assignment (arr of len 3, index 2) FAILED."
	end
	put skip
	if (A1[3] = 3) then
		put "1D array assignment (arr of len 3, index 3) PASSED."
	else
		put "1D array assignment (arr of len 3, index 3) FAILED."
	end
	put skip

	% 2D beginning and end array assignment test
	put "[...2D beginning and end array assignment TESTING...]"
	put skip
	integer A[10,10]
	A[1,1] <= 1
	A[10,10] <= 100

	if (A[1,1] = 1) then
		put "2D array assignment (beginning) PASSED."
	else
		put "2D array assignment (beginning) FAILED."
	end
	put skip
	if (A[10,10] = 100) then
		put "2D array assignment (end) PASSED."
	else
		put "2D array assignment (end) FAILED."
	end
	put skip


	% 2D complete array assignment test
	put "[...2D complete array assignment TESTING...]"
	put skip
	integer A2[2,2]
	A2[1,1] <= 1
	A2[1,2] <= 2
	A2[2,1] <= 3
	A2[2,2] <= 4
	if (A2[1,1] = 1) then
		put "2D array assignment (arr of len 4, index 1,1) PASSED."
	else
		put "2D array assignment (arr of len 4, index 1,1) FAILED."
	end
	put skip
	if (A2[1,2] = 2) then
		put "2D array assignment (arr of len 4, index 1,2) PASSED."
	else
		put "2D array assignment (arr of len 4, index 1,2) FAILED."
	end
	put skip
	if (A2[2,1] = 3) then
		put "2D array assignment (arr of len 4, index 2,1) PASSED."
	else
		put "2D array assignment (arr of len 4, index 2,1) FAILED."
		put A2[2,1]
	end
	put skip
	if (A2[2,2] = 4) then
		put "2D array assignment (arr of len 4, index 2,2) PASSED."
	else
		put "2D array assignment (arr of len 4, index 2,2) FAILED."
		put A2[2,2]
	end
	put skip


	% addition
	put "[...addition TESTING...]"
	put skip
	if ((1+1) = 2) then
		put "addition PASSED."
	else
		put "addition FAILED."
	end
	put skip

	% subtraction
	put "[...subtraction TESTING...]"
	put skip
	if ((1-1) = 0) then
		put "subtraction PASSED."
	else
		put "subtraction FAILED."
	end
	put skip

	% multiplication
	put "[...multiplication TESTING...]"
	put skip
	if ((y * x) = 8) then
		put "multiplication PASSED."
	else
		put "multiplication FAILED."
	end
	put skip

	% division
	put "[...division TESTING...]"
	put skip
	if ((y / x) = 2) then
		put "division PASSED."
	else
		put "division FAILED."
	end
	put skip

	% negation
	put "[...negation TESTING...]"
	put skip
	c <= !b
	if c then
		put "negation test PASSED."
	else
		put "negation test FAILED."
	end
	put skip

	% boolean and
	put "[...boolean and TESTING...]"
	put skip
	c <= a & b

	if !c then
		put "conjunction PASSED."
	else
		put "conjunction FAILED."
	end
	put skip

	% boolean or
	put "[...boolean or TESTING...]"
	put skip
	c <= a | b

	if c then
		put "disjunction PASSED."
	else
		put "disjunction FAILED."
	end
	put skip

	% less than
	put "[...less than TESTING...]"
	put skip
	c <= y < x
	if !c then
		put "less than test PASSED."
	else
		put "less than test FAILED."
	end
	put skip

	% less than or equal
	put "[...less than or equal TESTING...]"
	put skip
	c <= y <= x
	if !c then
		put "less than or equal test PASSED."
	else
		put "less than or equal test FAILED."
	end
	put skip

	% greater than
	put "[...greater than TESTING...]"
	put skip
	c <= y > x
	if c then
		put "greater than test PASSED."
	else
		put "greater than test FAILED."
	end
	put skip

	% greater than or equal
	put "[...greater than or equal TESTING...]"
	put skip
	c <= y >= x
	if c then
		put "greater than or equal test PASSED."
	else
		put "greater than or equal test FAILED."
	end
	put skip

	% equal to
	put "[...equal to TESTING...]"
	put skip
	c <= y = x
	if !c then
		put "equal to test PASSED."
	else
		put "equal to test FAILED."
	end
	put skip

	% not equal to
	put "[...not equal to TESTING...]"
	put skip
	c <= y != x
	if c then
		put "not equal to test PASSED."
	else
		put "not equal to test FAILED."
	end
	put skip

	% unary minus 
	put "[...unary minus  TESTING...]"
	put skip
	z <= -x
	if z < 0 then
		put "unary minus PASSED."
	else
		put "unary minus FAILED."
	end
	put skip

	% short-circuit (AND)
	put "[...short-circuit (AND) TESTING...]"
	put skip
	c <= false & (1/0 = 1)
	if !c then
		put "AND conditional PASSED."
	else
		put "AND conditional FAILED."
	end
	put skip

	% short-circuit (OR)
	put "[...short-circuit (OR) TESTING...]"
	put skip
	c <= true | (1/0 = 1)
	if c then
		put "OR conditional PASSED."
	else
		put "OR conditional FAILED."
	end
	put skip

	% yields; scope variable declaration and return
	put "[...yield; scope variable declaration and return TESTING...]"
	put skip
	if ({integer e e<=4 yields e} = 4) then
		put "yield; scope variable declaration and return PASSED."
	else
		put "yield; scope variable declaration and return FAILED."
	end

	% yield; outer scope variable modification and return
	put "[...yield; outer scope variable modification and return TESTING...]"
	put skip
	if ({x<=9999 yields x} = 9999) then
		put "yield; outer scope variable modification and return PASSED."
	else
		put "yield; outer scope variable modification and return FAILED."
	end

end